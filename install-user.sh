#!/bin/bash
set -e

# d-vecDB User Installation Script
# Installs d-vecDB server to user's home directory (~/.local/bin)

REPO="rdmurugan/d-vecDB"
BINARY_NAME="vectordb-server"
INSTALL_DIR="$HOME/.local/bin"
CONFIG_DIR="$HOME/.config/d-vecdb"
DATA_DIR="$HOME/.local/share/d-vecdb"

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_status() { echo -e "${BLUE}[INFO]${NC} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }

# Create user directories
create_directories() {
    print_status "Creating user directories..."
    mkdir -p "$INSTALL_DIR" "$CONFIG_DIR" "$DATA_DIR"
    print_success "Directories created"
}

# Add to PATH if not already there
update_path() {
    print_status "Checking PATH configuration..."
    
    # Determine shell config file
    if [ -n "$BASH_VERSION" ]; then
        SHELL_CONFIG="$HOME/.bashrc"
    elif [ -n "$ZSH_VERSION" ]; then
        SHELL_CONFIG="$HOME/.zshrc"
    else
        SHELL_CONFIG="$HOME/.profile"
    fi
    
    # Check if ~/.local/bin is in PATH
    if [[ ":$PATH:" != *":$INSTALL_DIR:"* ]]; then
        print_status "Adding $INSTALL_DIR to PATH in $SHELL_CONFIG"
        echo "" >> "$SHELL_CONFIG"
        echo "# d-vecDB installation" >> "$SHELL_CONFIG"
        echo "export PATH=\"$INSTALL_DIR:\$PATH\"" >> "$SHELL_CONFIG"
        print_success "PATH updated in $SHELL_CONFIG"
        print_warning "Please run: source $SHELL_CONFIG"
        print_warning "Or restart your shell to use the new PATH"
    else
        print_success "PATH already contains $INSTALL_DIR"
    fi
}

# Create default configuration
create_config() {
    print_status "Creating default configuration..."
    
    cat > "$CONFIG_DIR/config.toml" << EOF
# d-vecDB Configuration File
# Generated by install-user.sh

[server]
host = "127.0.0.1"
port = 8080
grpc_port = 9090
workers = 4

[storage]
data_dir = "$DATA_DIR"
wal_sync_interval = "1s"
memory_map_size = "512MB"

[index]
hnsw_max_connections = 16
hnsw_ef_construction = 200
hnsw_max_layer = 16

[monitoring]
enable_metrics = true
prometheus_port = 9091
log_level = "info"

[performance]
batch_size = 100
insert_workers = 4
query_cache_size = "100MB"
EOF

    print_success "Configuration created at $CONFIG_DIR/config.toml"
}

# Create a systemd user service
create_systemd_service() {
    if [ -d "$HOME/.config/systemd/user" ] || command -v systemctl >/dev/null 2>&1; then
        print_status "Creating systemd user service..."
        
        mkdir -p "$HOME/.config/systemd/user"
        
        cat > "$HOME/.config/systemd/user/d-vecdb.service" << EOF
[Unit]
Description=d-vecDB Vector Database Server
After=network.target
StartLimitBurst=5
StartLimitIntervalSec=10

[Service]
Type=exec
ExecStart=$INSTALL_DIR/$BINARY_NAME --config $CONFIG_DIR/config.toml
Restart=always
RestartSec=5
Environment=RUST_LOG=info
WorkingDirectory=$DATA_DIR

# Security settings
NoNewPrivileges=true
PrivateTmp=true
ProtectHome=read-only
ProtectSystem=strict
ReadWritePaths=$DATA_DIR $CONFIG_DIR

[Install]
WantedBy=default.target
EOF

        systemctl --user daemon-reload
        print_success "Systemd service created"
        print_status "To enable auto-start: systemctl --user enable d-vecdb"
        print_status "To start service: systemctl --user start d-vecdb"
    fi
}

# Show user-specific usage
show_usage() {
    cat << EOF

üè† d-vecDB User Installation Complete!

Files installed:
  ‚Ä¢ Binary: $INSTALL_DIR/$BINARY_NAME
  ‚Ä¢ Config: $CONFIG_DIR/config.toml
  ‚Ä¢ Data:   $DATA_DIR/

Quick Start:
  1. Source your shell config:
     source ~/.bashrc  # or ~/.zshrc

  2. Start the server:
     $BINARY_NAME --config $CONFIG_DIR/config.toml

  3. Or start with systemd (if available):
     systemctl --user start d-vecdb

Python Client:
  pip install --user d-vecdb
  
Management Commands:
  ‚Ä¢ Start: systemctl --user start d-vecdb
  ‚Ä¢ Stop:  systemctl --user stop d-vecdb
  ‚Ä¢ Logs:  journalctl --user -u d-vecdb -f

Configuration: $CONFIG_DIR/config.toml
Data Directory: $DATA_DIR

Happy vector searching! üéØ
EOF
}

# Download function (reuse from main installer)
download_binary() {
    local version platform asset_name download_url
    
    # Detect platform (simplified)
    case "$(uname -s)" in
        Linux*) platform="linux-musl-x64" ;;
        Darwin*) 
            case "$(uname -m)" in
                arm64) platform="macos-arm64" ;;
                *) platform="macos-x64" ;;
            esac ;;
        *) echo "Unsupported OS"; exit 1 ;;
    esac
    
    # Get latest version
    if command -v curl >/dev/null; then
        version=$(curl -s "https://api.github.com/repos/$REPO/releases/latest" | grep '"tag_name"' | cut -d'"' -f4)
    else
        version="v0.1.1"  # fallback
    fi
    
    asset_name="$BINARY_NAME-$platform"
    download_url="https://github.com/$REPO/releases/download/$version/$asset_name"
    
    print_status "Downloading $asset_name..."
    
    if command -v curl >/dev/null; then
        curl -L -o "$INSTALL_DIR/$BINARY_NAME" "$download_url"
    else
        print_error "curl is required for download"
        exit 1
    fi
    
    chmod +x "$INSTALL_DIR/$BINARY_NAME"
    print_success "Binary installed to $INSTALL_DIR/$BINARY_NAME"
}

# Main function
main() {
    echo
    echo "üè† d-vecDB User Installation"
    echo "============================"
    echo
    
    create_directories
    download_binary
    update_path
    create_config
    create_systemd_service
    
    show_usage
}

main "$@"